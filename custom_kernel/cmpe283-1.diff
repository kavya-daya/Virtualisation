diff --git a/cmpe283-1.c b/cmpe283-1.c
index bdab917..e44e063 100644
--- a/cmpe283-1.c
+++ b/cmpe283-1.c
@@ -11,7 +11,13 @@
  * Model specific registers (MSRs) by the module.
  * See SDM volume 4, section 2.1
  */
-#define IA32_VMX_PINBASED_CTLS	0x481
+#define IA32_VMX_PINBASED_CTLS 0x481
+#define IA32_VMX_BASIC 0x480
+#define IA32_VMX_PROCBASED_CTLS 0x482
+#define IA32_VMX_PROCBASED_CTLS2 0x48B
+#define IA32_VMX_EXIT_CTLS 0x483
+#define IA32_VMX_ENTRY_CTLS 0x484
+
 
 /*
  * struct caapability_info
@@ -38,6 +44,75 @@ struct capability_info pinbased[5] =
 	{ 7, "Process Posted Interrupts" }
 };
 
+struct capability_info entry_controls[9] =
+{
+	{2, "Load debug controls"},
+	{9, "IA-32e mode guest"},
+	{10, "Entry to SMM" },
+	{11, "Deactivate dualmonitor treatment" },
+	{13, "Load IA32_PERF_GLOBAL_CTRL" },
+	{14, "Load IA32_PAT" },
+	{15, "Save IA32_EFER" },
+	{16, "Load IA32_BNDCFGS" },
+	{17, "Conceal VMX from PT" }
+};
+
+struct capability_info exit_controls[11] =
+{
+	{ 2, "Save Debug Controls" },
+	{ 9, "Host address-space size" },
+	{ 12, "Load IA32_PERF_GLOBAL_CTRL" },
+	{ 15, "Acknowledge interrupt on exit" },
+	{ 18, "Save IA32_PAT" },
+	{ 19, "Load IA32_PAT" },
+	{ 20, "Save IA32_EFER" },
+	{ 21, "Load IA32_EFER" },
+	{ 22, "Save VMX-preemption timer value" },
+	{ 23, "Clear IA32_BNDCFGS" },
+	{ 24, "Conceal VMX from PT" }
+};
+
+struct capability_info procbased_controlspt1[12] =
+{
+	{2, "Interrupt-window exiting"},
+	{3, "Use TSC offsetting"},
+	{7, "HLT exiting" },
+	{9, "INVLPG exiting" },
+	{10, "MWAIT exiting" },
+	{11, "RDPMC exiting" },
+	{12, "RDTSC exiting" },
+	{15, "CR3-load exiting" },
+	{16, "CR3-store exiting" },
+	{19, "CR8-load exiting"},
+	{20, "CR8-store exiting"},
+	{31, "Activate secondary" }
+};
+struct capability_info procbased_controlspt2[23] =
+{
+	{0, "Virtualize APIC accesses"},
+	{1, "Enable EPT"},
+	{2, "Descriptor-table exiting" },
+	{3, "Enable RDTSCP" },
+	{4, "Virtualize x2APIC mode" },
+	{5, "Enable VPID" },
+	{6, "WBINVD exiting" },
+	{7, "Unrestricted guest" },
+	{8, "APIC-register virtualization" },
+	{9, "Virtual-interrupt delivery"},
+	{10, "PAUSE-loop exiting"},
+	{11, "RDRAND exiting" },
+	{12, "Enable INVPCID" },
+	{13, "Enable VM functions" },
+	{14, "VMCS shadowing" },
+	{15, "Enable ENCLS exiting" },
+	{16, "RDSEED exiting" },
+	{17, "Enable PML" },
+	{18, "EPT-violation" },
+	{19, "Conceal VMX from PT" },
+	{20, "Enable XSAVES/XRSTORS" },
+	{22, "Mode-based execute control for EPT" },
+	{25, "Use TSC scaling" }
+};
 /*
  * report_capability
  *
@@ -79,12 +154,33 @@ void
 detect_vmx_features(void)
 {
 	uint32_t lo, hi;
+         /*pin based controls*/
+                rdmsr(IA32_VMX_PINBASED_CTLS, lo, hi);
+		pr_info("Pinbased Controls MSR: 0x%llx\n",(uint64_t)(lo | (uint64_t)hi << 32));	
+		report_capability(pinbased, 5, lo, hi);
+
+        /* entry controls*/
+		rdmsr(IA32_VMX_ENTRY_CTLS, lo, hi);
+		pr_info("Entry Controls: 0x%llx\n",(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(entry_controls, 9, lo, hi);
+       /*exit controls*/
+                rdmsr(IA32_VMX_EXIT_CTLS, lo, hi);
+		pr_info("Exit Controls: 0x%llx\n",(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(exit_controls, 12, lo, hi);
+
+	rdmsr(IA32_VMX_BASIC, lo, hi) ;
+
+	if(!((hi >> 23) & 1)) {		
+		rdmsr(IA32_VMX_PROCBASED_CTLS, lo, hi);
+		pr_info("Procbased Controls: 0x%llx\n",(uint64_t)(lo | (uint64_t)hi << 32));
+		report_capability(procbased_controlspt1, 11, lo, hi);
+     	if ((hi >> 31) & 1) {
+	rdmsr(IA32_VMX_PROCBASED_CTLS2, lo, hi);
+	pr_info("Procbased Controls 2: 0x%llx\n",(uint64_t)(lo | (uint64_t)hi << 32));
+			report_capability(procbased_controlspt2, 23, lo, hi);
+		            }
+                            }
 
-	/* Pinbased controls */
-	rdmsr(IA32_VMX_PINBASED_CTLS, lo, hi);
-	pr_info("Pinbased Controls MSR: 0x%llx\n",
-		(uint64_t)(lo | (uint64_t)hi << 32));
-	report_capability(pinbased, 5, lo, hi);
 }
 
 /*
